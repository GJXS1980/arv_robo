# observation_sources参数列出了代价地图所需要的所有传感器信息，scan表示传感器参考系的名称
# data_type为表示激光数据使用消息类型，topic表示传感器发布的话题名称
# marking和clearing参数用来表示是否需要使用传感器的实时信息来添加或清除代价地图中的障碍物信息
# max_obstacle_height和min_obstacle_height两个参数用于描述障碍物的最大高度和最小高度
# "obstacle_range" 参数确定最大范围传感器读数，这意味着机器人只会更新其地图包含距离移动基座2.5米以内的障碍物的信息
# “raytrace_range”参数确定了用于清除指定范围外的空间。将其设置为3.0米，这意味着机器人将尝试清除3米外的空间

map_type: costmap
origin_z: 0.0
z_resolution: 1
z_voxels: 2

obstacle_range: 2.5 #设置机器人检测障碍物的最大距离
raytrace_range: 3.0 # 传感器最大探测距离

publish_voxel_map: false
transform_tolerance: 20.0
meter_scoring: true


footprint: [[0.4425, -0.3175], [0.4425, 0.3175], [-0.4425, 0.3175], [-0.4425, -0.3175]] # 设置机器人在二维地图上的占用面积，参数以机器人的中心作为坐标原点
footprint_padding: 0.1

# plugins:
# - {name: obstacles_layer, type: "costmap_2d::ObstacleLayer"}
# - {name: inflater_layer, type: "costmap_2d::InflationLayer"}

inflater_layer:
  enabled: true
  inflation_radius: 0.4 # 这个参数表示机器人路径规划应与机器人保持0.1m以上的安全距离
  cost_scaling_factor: 5.0    #膨胀过程中应用到代价值的比例因子

#静态地图层，即SLAM中构建的地图层
static_layer:
  enabled: true


#配置障碍物图层
obstacle_layer:
  enabled: true    #是否启用障碍物图层
  combination_method: 1    #只能设置为0或1，用来更新地图上的代价值，一般设置为1
  track_unknown_space: true    #如果设置为false，那么地图上代价值就只分为致命碰撞和自由区域两种，如果设置为true，那么就分为致命碰撞，自由区域和未知区域三种
  obstacle_range: 2.5    #设置机器人检测障碍物的最大范围
  raytrace_range: 3.0    #在机器人移动过程中，实时清除代价地图上的障碍物的最大范围，更新可自由移动的空间数据
  observation_sources: laser_scan_sensor    #设置导航中所使用的传感器，这里可以用逗号形式来区分开很多个传感器
  laser_scan_sensor: {    #添加的激光雷达传感器
    sensor_frame: laser_frame,    #激光雷达传感器的坐标系名称
    data_type: LaserScan,    #激光雷达数据类型
    topic: /scan,    #该激光雷达发布的话题名
    marking: true,    #是否可以使用该传感器来标记障碍物
    clearing: true    #是否可以使用该传感器来清除障碍物标记为自由空间
  }

